trigger:
  - master  
  - develop
  
pool:
  vmImage: ubuntu-latest

variables:
  - group: automatica.core.8

stages:
  - stage: DEV
    displayName: DEV
  
    jobs:
    - job: ModBus
      displayName: "Build Modbus"
      pool:
        vmImage: 'ubuntu-latest'

      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '$(SDK_VERSION)'

      - task: Bash@3
        displayName:  Install tools
        inputs:
          targetType: 'inline'
          script: |
            dotnet tool install automatica-cli  --global
            dotnet tool update automatica-cli -g

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          
          

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: '**/*[Tt]ests.csproj'
          arguments: '--configuration $(BuildConfiguration) -l trx  /p:CollectCoverage=true /p:CoverletOutputFormat="opencover"'

      - task: AutomaticaCorePluginCli@7
        displayName: Plugin ModBus build
        inputs:
          manifest_path: 'P3.Driver.ModBusDriverFactory/automatica-manifest.json'
          version: '$(AUTOMATICA_VERSION).$(Build.BuildId)'
          api_key: '$(CLOUD_API_KEY)'
          cloud_url: '$(CLOUD_URL)'
          configuration: 'Debug$(BuildConfiguration)'
          publish: true
          dockerize: true
          outputdirectory: '$(build.artifactstagingdirectory)'

      - task: AutomaticaCoreDockerMultiArchCli@7
        displayName: Docker modbus multi-arch
        inputs:
          dockerRegistryEndpoint: 'DockerHub'
          dockerfile_amd64: 'Dockerfile'
          dockerfile_arm32: 'Dockerfile.arm32'
          imageName: 'automaticacore/plugin-p3.driver.modbus'
          buildArgs: |
            MANIFEST_DIR=P3.Driver.ModBusDriverFactory/
            VERSION=$(AUTOMATICA_VERSION).$(Build.BuildId)
            CONFIG=$(BuildConfiguration)
          version: '$(AUTOMATICA_VERSION).$(Build.BuildId)'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'


    - job: Solarman
      displayName: "Build Solarman V5"
      pool:
        vmImage: 'ubuntu-latest'
    
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '$(SDK_VERSION)'

      - task: Bash@3
        displayName:  Install tools
        inputs:
          targetType: 'inline'
          script: |
            dotnet tool install automatica-cli  --global  2>/dev/null
            dotnet tool update automatica-cli -g  2>/dev/null

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          
          

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: '**/*[Tt]ests.csproj'
          arguments: '--configuration $(BuildConfiguration) -l trx  /p:CollectCoverage=true /p:CoverletOutputFormat="opencover"'

      - task: AutomaticaCorePluginCli@7
        displayName: Plugin solarman build
        inputs:
          manifest_path: 'Solarman/P3.Driver.ModBus.SolarmanV5.DriverFactory/automatica-manifest.json'
          version: '$(AUTOMATICA_VERSION).$(Build.BuildId)'
          api_key: '$(CLOUD_API_KEY)'
          cloud_url: '$(CLOUD_URL)'
          configuration: 'Debug$(BuildConfiguration)'
          publish: true
          dockerize: true
          outputdirectory: '$(build.artifactstagingdirectory)'

      - task: AutomaticaCoreDockerMultiArchCli@7
        displayName: Docker solarman multi-arch
        inputs:
          dockerRegistryEndpoint: 'DockerHub'
          dockerfile_amd64: 'Dockerfile'
          dockerfile_arm32: 'Dockerfile.arm32'
          imageName: 'automaticacore/plugin-p3.driver.modbus.solarman'
          buildArgs: |
            MANIFEST_DIR=Solarman/P3.Driver.ModBus.SolarmanV5.DriverFactory/
            VERSION=$(AUTOMATICA_VERSION).$(Build.BuildId)
            CONFIG=$(BuildConfiguration)
          version: '$(AUTOMATICA_VERSION).$(Build.BuildId)'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'        
        